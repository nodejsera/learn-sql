3.1 Write a query to list all the film titles

Solution:

A SELECT statement will work here.

select title
from film;



3.2 Write a query to return the actor's first names and last names only (with the column headings "First Name" and "Last Name")

Solution:

Use column name aliasing to rename the columns. You can alias more than one column in the SELECT clause.

select first_name as "First Name", last_name as "Last Name"
from actor;



3.3 How many rows are in the inventory table?

Solution:

4,581. After doing a select, you can find out how many rows were returned in the output window. In a later video, you'll learn how to write a query to return this count to you directly using the COUNT(*) function (if you're feeling adventurous, see if you can figure it out now! Try using SELECT COUNT(*) instead of SELECT *)

select *
from inventory;



3.4 Write a query that returns all the columns from the actor table without using the * wildcard in the SELECT clause

Solution:

Looking at the ERD (Entity Relationship Diagram) we can find out all the columns in the actor table and list them explicitly in the SELECT statement.

select actor_id, first_name, last_name, last_update
from actor;



3.5 Write a query to obtain the length of each customer's first name (*remember to look for string functions in the documentation that can help*)

Solution:

You can use the length(string) function to obtain the length of text.

select first_name, length(first_name)
from customer;



3.6 Write a query to return the initials for each customer

Solution:

You can use the left(text, n) function to obtain the first character from the first name and last name of each customer, and then join them with ||.

select
  first_name,
  last_name,
  left(first_name, 1) || left(last_name, 1) as "initial"
from customer;



3.7 Each film has a rental_rate, which is how much money it costs for a customer to rent out the film. Each film also has a replacement_cost, which is how much money the film costs to replace. Write a query to figure out how many times each film must be rented out to cover its replacement cost.

Solution:

Divide replacement_cost by rental_rate to obtain the number of times each film must be rented out. This will however often be a fractional number and a film can't be rented out a fractional number of times. To round this up to the nearest integer you can use the ceil(numeric) function. Click here for a full list of math functions.

select
  title,
  rental_rate,
  replacement_cost,
  ceil(replacement_cost / rental_rate) as "# rentals to break-even"
from film;



3.8 Write a query to list all the films with a 'G' rating

Solution:

select title, rating
from film
where rating = 'G';



3.9 List all the films longer than 2 hours (note each film has a length in minutes)

Solution:

Use a WHERE clause with length > 120 (120 minutes is equivalent to 2 hrs). Alternatively, you could have used where (length/60.0) > 2 but you would have to be careful with integer division (if you're not familiar with integer division, don't worry. We'll cover it in an upcoming video).

select title, length
from film
where length > 120;



3.10 Write a query to list all the rentals made before June, 2005

Solution:

You can use the first day of June 2005 ('2005-06-01') as the date to compare against.

select rental_id, rental_date
from rental
where rental_date < '2005-06-01';



3.11 In Exercise 3.7, you wrote a query to figure out how many times each film must be rented out to cover its replacement cost. Now write a query to return only those films that must be rented out more than 30 times to cover their replacement cost.

Solution:

We have to repeat the expression to calculate the number of times the film must be rented out in both the select and the where clause. In a later video, we'll learn ways that we can avoid this repetition.

select
  title,
  rental_rate,
  replacement_cost,
  ceil(replacement_cost / rental_rate) as "# rentals to break-even"
from film
where ceil(replacement_cost / rental_rate) > 30;




3.12 Write a query to show all rentals made by the customer with ID 388 in 2005

Solution:

select rental_id, rental_date
from rental
where rental_date >= '2005-01-01'
  and rental_date < '2006-01-01'
  and customer_id = 388;



3.13 Weâ€™re trying to list all films with a length of an hour or less. Show two different ways to fix our query below that isn't working (one using the NOT keyword, and one without)

Solution:

A solution using the NOT keyword (the original query had the NOT in the wrong place)

select title, rental_duration, length
from film
where not length > 60;
A solution not using the NOT keyword.
select title, rental_duration, length
from film
where length <= 60;



3.14 Explain what each of the two queries below are doing and why they generate different results. Which one is probably a mistake and why?

Solution:

The first query will return all films where the rating is neither 'G' nor 'PG'. Stated another way, if a film is rated 'G' it won't be in the output. If a film is rated 'PG' it also won't be in the output. All other films will be in the output. The second query almost does nothing. It returns almost all the films - including those with a 'G' rating and also those with a 'PG' rating. (I say almost for reasons you'll learn about in the next video). Think carefully about how both AND and OR work to understand this behaviour.




3.15 Write a single query to show all rentals where the return date is greater than the rental date, or the return date is equal to the rental date, or the return date is less than the rental date. How many rows are returned? Why doesn't this match the number of rows in the table overall?

Solution:

In the next video, we'll explore why this only returns 15,861 rows and not 16,044 - the total number of rows in the table.

select rental_id, rental_date, return_date
from rental
where return_date > rental_date
  or return_date = rental_date
  or return_date < rental_date;